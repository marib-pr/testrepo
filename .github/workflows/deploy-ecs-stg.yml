name: Deploy ECS to Staging

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read

env:
  AWS_REGION: us-west-2
  ENVIRONMENT: stg
  BPI_SERVICE: gain-assist
  BPI_STACK: backup
  ECR_REPOSITORY_NAME: gain-assist

jobs:
  deploy:
    name: Deploy latest main to staging
    runs-on: ubuntu-latest
    steps:
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-region: ${{ env.AWS_REGION }}
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Get AWS account ID
      #   id: aws
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      #     echo "account_id=${ACCOUNT_ID}" >> "$GITHUB_OUTPUT"

      - name: Determine latest commit SHA on main
        id: sha
        shell: bash
        run: |
          set -euo pipefail
          # Use the GitHub API to get the latest commit on main to avoid needing a checkout
          LATEST_SHA=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits/main" | jq -r .sha)
          if [[ -z "${LATEST_SHA}" || "${LATEST_SHA}" == "null" ]]; then
            echo "Failed to determine latest commit SHA for main" >&2
            exit 1
          fi
          echo "commit_sha=${LATEST_SHA}" >> "$GITHUB_OUTPUT"

      - name: Validate ECR image exists for tag
        id: ecr_image
        shell: bash
        env:
          COMMIT_SHA: ${{ steps.sha.outputs.commit_sha }}
        run: |
          set -euo pipefail
          REPO_NAME="${ECR_REPOSITORY_NAME}"
          echo "Checking ECR image ${REPO_NAME}:${COMMIT_SHA} in ${AWS_REGION}..."
          aws ecr describe-images \
            --repository-name "${REPO_NAME}" \
            --image-ids imageTag="${COMMIT_SHA}" \
            --region "${AWS_REGION}" \
            >/dev/null
          echo "ECR image exists."

      - name: Prepare deployment variables
        id: vars
        shell: bash
        env:
          COMMIT_SHA: ${{ steps.sha.outputs.commit_sha }}
          ACCOUNT_ID: ${{ steps.aws.outputs.account_id }}
        run: |
          set -euo pipefail
          CLUSTER_NAME="${ENVIRONMENT}-${BPI_SERVICE}-${BPI_STACK}-cluster"
          SERVICE_NAME="${ENVIRONMENT}-${BPI_SERVICE}-${BPI_STACK}-service"
          FAMILY_NAME="${ENVIRONMENT}-${BPI_SERVICE}-${BPI_STACK}-task"
          CONTAINER_NAME="${BPI_SERVICE}-pipeline"
          ECR_IMAGE="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${COMMIT_SHA}"
          echo "cluster_name=${CLUSTER_NAME}" >> "$GITHUB_OUTPUT"
          echo "service_name=${SERVICE_NAME}" >> "$GITHUB_OUTPUT"
          echo "family_name=${FAMILY_NAME}" >> "$GITHUB_OUTPUT"
          echo "container_name=${CONTAINER_NAME}" >> "$GITHUB_OUTPUT"
          echo "new_image=${ECR_IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Fetch current task definition JSON
        id: fetch_td
        shell: bash
        env:
          FAMILY: ${{ steps.vars.outputs.family_name }}
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${FAMILY}" \
            --query 'taskDefinition' \
            --output json > taskdef_raw.json
          # Strip read-only fields not accepted by register-task-definition
          jq 'del(.taskDefinitionArn,.revision,.status,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' \
            taskdef_raw.json > taskdef_base.json

      - name: Render task definition (set image)
        id: render_td
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: taskdef_base.json
          container-name: ${{ steps.vars.outputs.container_name }}
          image: ${{ steps.vars.outputs.new_image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render_td.outputs.task-definition }}
          service: ${{ steps.vars.outputs.service_name }}
          cluster: ${{ steps.vars.outputs.cluster_name }}
          wait-for-service-stability: true


